type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/dto/ReturnedTicket.java
  visible: true
  text: |
    package cinema.dto;

    public class ReturnedTicket {
        private Seat returnedTicket;

        public ReturnedTicket() {
        }

        public ReturnedTicket(Seat returnedTicket) {
            this.returnedTicket = returnedTicket;
        }

        public Seat getReturnedTicket() {
            return returnedTicket;
        }

        public void setReturnedTicket(Seat returnedTicket) {
            this.returnedTicket = returnedTicket;
        }
    }
  learner_created: true
- name: src/cinema/dto/Order.java
  visible: true
  text: |
    package cinema.dto;

    import java.util.UUID;

    public class Order {
        private UUID token;
        private Seat ticket;

        public Order() {
        }

        public Order(Seat ticket) {
            token = UUID.randomUUID();
            this.ticket = ticket;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Order ticket = (Order) o;
            return token.equals(ticket.token) && this.ticket.equals(ticket.ticket);
        }
    }
  learner_created: true
- name: src/cinema/exceptions/WrongPasswordException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class WrongPasswordException extends RuntimeException{
        public WrongPasswordException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/exceptions/WrongTokenException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class WrongTokenException extends RuntimeException{
        public WrongTokenException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/exceptions/SeatNotFoundException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class SeatNotFoundException extends RuntimeException{

        public SeatNotFoundException(String message){
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/advices/SeatsAdvice.java
  visible: true
  text: |
    package cinema.advices;

    import cinema.dto.Response;
    import cinema.exceptions.SeatNotAvailableException;
    import cinema.exceptions.SeatNotFoundException;
    import cinema.exceptions.WrongPasswordException;
    import cinema.exceptions.WrongTokenException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    public class SeatsAdvice {

        @ExceptionHandler(SeatNotAvailableException.class)
        public ResponseEntity<Response> handleSeatNotAvailableException(SeatNotAvailableException error) {
            Response response = new Response(error.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(SeatNotFoundException.class)
        public ResponseEntity<Response> handleSeatNotFoundException(SeatNotFoundException error) {
            Response response = new Response(error.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(WrongTokenException.class)
        public ResponseEntity<Response> handleWrongTokenException(WrongTokenException error) {
            Response response = new Response(error.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(WrongPasswordException.class)
        public ResponseEntity<Response> handleWrongPasswordException(WrongPasswordException error) {
            Response response = new Response(error.getMessage());
            return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
        }
    }
  learner_created: true
- name: src/cinema/dto/Seat.java
  visible: true
  text: |
    package cinema.dto;

    public class Seat {
        private int row;
        private int column;
        private int price;

        public Seat() {
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/exceptions/SeatNotAvailableException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class SeatNotAvailableException extends RuntimeException{

        public SeatNotAvailableException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/dto/Room.java
  visible: true
  text: |
    package cinema.dto;

    import java.util.ArrayList;
    import java.util.List;

    public class Room {
        private int totalRows;
        private int totalColumns;
        private final List<Seat> availableSeats = new ArrayList<>();

        public Room(int totalRows, int totalColumns) {
            int price;
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            for (int i = 1; i <= totalColumns; i++) {
                for (int j = 1; j <= totalRows; j++) {
                    price = j <= 4 ? 10 : 8;
                    availableSeats.add(new Seat(j, i, price));
                }
            }
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/dto/Stats.java
  visible: true
  text: |
    package cinema.dto;

    public class Stats {

        private int currentIncome;
        private int numberOfAvailableSeats;
        private int numberOfPurchasedTickets;

        public Stats() {
        }

        public Stats(int currentIncome, int numberOfAvailableSeats, int numberOfPurchasedTickets) {
            this.currentIncome = currentIncome;
            this.numberOfAvailableSeats = numberOfAvailableSeats;
            this.numberOfPurchasedTickets = numberOfPurchasedTickets;
        }

        public int getCurrentIncome() {
            return currentIncome;
        }

        public void setCurrentIncome(int currentIncome) {
            this.currentIncome = currentIncome;
        }

        public int getNumberOfAvailableSeats() {
            return numberOfAvailableSeats;
        }

        public void setNumberOfAvailableSeats(int numberOfAvailableSeats) {
            this.numberOfAvailableSeats = numberOfAvailableSeats;
        }

        public int getNumberOfPurchasedTickets() {
            return numberOfPurchasedTickets;
        }

        public void setNumberOfPurchasedTickets(int numberOfPurchasedTickets) {
            this.numberOfPurchasedTickets = numberOfPurchasedTickets;
        }
    }
  learner_created: true
- name: src/cinema/controllers/RoomController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.dto.*;
    import cinema.exceptions.SeatNotAvailableException;
    import cinema.exceptions.SeatNotFoundException;
    import cinema.exceptions.WrongPasswordException;
    import cinema.exceptions.WrongTokenException;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    @RestController
    public class RoomController {

        private final String SEAT_NOT_AVAILABLE_MESSAGE = "The ticket has been already purchased!";
        private final String SEAT_NOT_FOUND_MESSAGE = "The number of a row or a column is out of bounds!";
        private final String WRONG_TOKEN = "Wrong token!";
        private final String WRONG_PASSWORD = "The password is wrong!";
        private Room cinema = new Room(9, 9);
        private Till till = new Till();

        @GetMapping("/seats")
        public Room getSeats() {
            return cinema;
        }

        @GetMapping("/orders")
        public Till getOrders() {
            return till;
        }

        @PostMapping("/purchase")
        public Order getTicket(@RequestBody Seat requestedSeat) {
            List<Seat> availableSeats = cinema.getAvailableSeats();

            if (requestedSeat.getRow() > cinema.getTotalRows() ||
                    requestedSeat.getColumn() > cinema.getTotalColumns() ||
                    requestedSeat.getRow() < 1 || requestedSeat.getColumn() < 1) {
                throw new SeatNotFoundException(SEAT_NOT_FOUND_MESSAGE);
            }

            for (int i = 0; i < availableSeats.size(); i++) {
                Seat currentSeat = availableSeats.get(i);
                if (currentSeat.getColumn() == requestedSeat.getColumn()
                        && currentSeat.getRow() == requestedSeat.getRow()) {
                    availableSeats.remove(i);
                    Order order = new Order(currentSeat);
                    till.getOrders().add(order);
                    return order;
                }
            }
            throw new SeatNotAvailableException(SEAT_NOT_AVAILABLE_MESSAGE);
        }

        @PostMapping("/return")
        public ReturnedTicket returnTicket(@RequestBody Order orderNew) {
            Seat returnedTicket;
            List<Order> orders = till.getOrders();
            for (int i = 0; i < orders.size(); i++) {
                Order order = orders.get(i);
                if (orderNew.getToken().equals(order.getToken())) {
                    returnedTicket = order.getTicket();
                    orders.remove(order);
                    return new ReturnedTicket(returnedTicket);
                }
            }
            throw new WrongTokenException(WRONG_TOKEN);
        }

        @GetMapping("/stats")
        public Stats getStats(@RequestParam(name = "password") String password) {
            if (password.equals("super_secret")) {
                List<Order> orders = till.getOrders();
                List<Seat> seats = cinema.getAvailableSeats();
                int currentIncome = 0;
                for (Order order: orders) {
                    currentIncome += order.getTicket().getPrice();
                }
                return new Stats(currentIncome, seats.size(), orders.size());
            } else {
                throw new WrongPasswordException(WRONG_PASSWORD);
            }
        }
    }
  learner_created: true
- name: src/cinema/dto/Till.java
  visible: true
  text: |
    package cinema.dto;

    import java.util.ArrayList;
    import java.util.List;

    public class Till {
        private final List<Order> orders = new ArrayList<>();

        public Till() {
        }

        public List<Order> getOrders() {
            return orders;
        }
    }
  learner_created: true
- name: src/cinema/dto/Response.java
  visible: true
  text: |
    package cinema.dto;

    public class Response {
        private String error;

        public Response() {
        }

        public Response(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String message) {
            this.error = message;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 17 Sep 2022 12:04:11 UTC
record: 4
